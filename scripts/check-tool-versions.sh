#!/usr/bin/env bash
set -euo pipefail

# Usage: ./scripts/check-tool-versions.sh [Makefile]
MAKEFILE=${1:-Makefile}
OUT_UPDATES=".tools_updates"
OUT_SCRIPT=".tools_update_makefile.sh"

echo "Checking tool versions in ${MAKEFILE}..."

get_current() {
  var="$1"
  grep -E "^${var}:=" "${MAKEFILE}" | head -n1 | sed -E "s/^${var}:=[[:space:]]*//" || true
}

fetch_latest_tag() {
  repo="$1"
  # Query GitHub releases/latest and extract tag_name
  tag=$(curl -sS "https://api.github.com/repos/${repo}/releases/latest" | grep -o '"tag_name": *"[^"]*"' | head -n1 | sed -E 's/.*"([^"]+)".*/\1/') || true
  echo "$tag"
}

declare -A REPOS
REPOS[GOLANGCI_LINT]=golangci/golangci-lint
REPOS[AIR]=air-verse/air
REPOS[GOVULNCHECK]=golang/vuln

CUR_GOLANGCI=$(get_current GOLANGCI_LINT_VERSION)
CUR_AIR=$(get_current AIR_VERSION)
CUR_GOVULN=$(get_current GOVULNCHECK_VERSION)

echo "Current pins: golangci-lint=${CUR_GOLANGCI}, air=${CUR_AIR}, govulncheck=${CUR_GOVULN}"

LATEST_GOLANGCI=$(fetch_latest_tag "${REPOS[GOLANGCI_LINT]}")
LATEST_AIR=$(fetch_latest_tag "${REPOS[AIR]}")
LATEST_GOVULN=$(fetch_latest_tag "${REPOS[GOVULNCHECK]}")

echo "Latest releases: golangci-lint=${LATEST_GOLANGCI}, air=${LATEST_AIR}, govulncheck=${LATEST_GOVULN}"

> "$OUT_UPDATES"
> "$OUT_SCRIPT"
echo "#!/usr/bin/env bash" > "$OUT_SCRIPT"
echo "set -euo pipefail" >> "$OUT_SCRIPT"
echo "# This script updates Makefile pins; generated by scripts/check-tool-versions.sh" >> "$OUT_SCRIPT"

changed=0
update_line() {
  varname="$1"; old="$2"; new="$3"
  if [ -z "$new" ]; then
    return
  fi
  if [ "$old" != "$new" ]; then
    echo "${varname} will be updated: ${old} -> ${new}"
    echo "${varname}=${new}" >> "$OUT_UPDATES"
    # emit sed replacement (portable for GNU sed / mac sed)
    # use temporary file replacement to be safe
    esc_new=$(printf '%s' "$new" | sed 's/[&/]/\\&/g')
    printf "sed -E -i.bak 's/^%s:=.*$/%s:=${esc_new}/' %s\n" "$varname" "$varname" "$MAKEFILE" >> "$OUT_SCRIPT"
    changed=1
  fi
}

update_line GOLANGCI_LINT_VERSION "$CUR_GOLANGCI" "$LATEST_GOLANGCI"
update_line AIR_VERSION "$CUR_AIR" "$LATEST_AIR"
update_line GOVULNCHECK_VERSION "$CUR_GOVULN" "$LATEST_GOVULN"

if [ "$changed" -eq 0 ]; then
  echo "No updates available."
  rm -f "$OUT_SCRIPT" "$OUT_UPDATES"
  exit 0
fi

chmod +x "$OUT_SCRIPT"
echo "Update script written to $OUT_SCRIPT" >> "$OUT_UPDATES"
echo "Updates available:"; cat "$OUT_UPDATES"

exit 0
